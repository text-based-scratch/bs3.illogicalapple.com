{"mappings":"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","sources":["Documents/GitHub/bs3.illogicalapple.com/src/js/autocomplete.js"],"sourcesContent":["import blocks from \"../lib/all-blocks\"\n\nlet completeEl = $(\"ul.autocomplete\")\nlet tempListener = () => selectListener(activeWord)\n\nfunction selectListener(event, activeWord) {\n  if(event.key == \"ArrowDown\") {\n    event.stopPropagation()\n    if(Number(completeEl.dataset.activeIndex) < completeEl.childNodes.length - 1) {\n      completeEl.childNodes[Number(completeEl.dataset.activeIndex)].classList.remove(\"active\")\n      completeEl.dataset.activeIndex++\n      completeEl.childNodes[Number(completeEl.dataset.activeIndex)].classList.add(\"active\")\n    } else {\n      completeEl.childNodes[Number(completeEl.dataset.activeIndex)].classList.remove(\"active\")\n      completeEl.dataset.activeIndex = 0\n      completeEl.childNodes[0].classList.add(\"active\")\n    }\n  } else if(event.key == \"ArrowUp\") {\n    event.stopPropagation()\n    if(Number(completeEl.dataset.activeIndex) > 0) {\n      completeEl.childNodes[Number(completeEl.dataset.activeIndex)].classList.remove(\"active\")\n      completeEl.dataset.activeIndex--\n      completeEl.childNodes[Number(completeEl.dataset.activeIndex)].classList.add(\"active\")\n    } else {\n      completeEl.childNodes[0].classList.remove(\"active\")\n      completeEl.dataset.activeIndex = completeEl.childNodes.length - 1\n      completeEl.childNodes[Number(completeEl.dataset.activeIndex)].classList.add(\"active\")\n    }\n  }\n}\n\nwindow.autocomplete = () => {\n  let wrap = false\n  let candidates = []\n  let activeWord = $(\"pre.text\").querySelectorAll(\"div.line\")[caretPosition[1]].innerText.split(/[^a-z0-9\\_]/i)\n  activeWord = activeWord[activeWord.length - 1]\n  completeEl.style.display = \"block\"\n  completeEl.dataset.activeIndex = 0\n  if(activeWord != \"\") {\n    let validBlocks = {}\n    for(block in blocks) {\n      if(blocks[block].keyword == \"outer\" || (blocks[block].opcode.split(\"_\")[0] == \"event\" && ![\"event_broadcast\", \"event_broadcastandwait\"].includes(blocks[block].opcode))) {\n        if(indentation == 0) validBlocks[block] = blocks[block]\n      } else if(indentation != 0) validBlocks[block] = blocks[block]\n    }\n    let goodCandidates = Object.entries(validBlocks).filter(block => block[0].startsWith(activeWord))\n    let worseCandidates = Object.entries(validBlocks).filter(block => block[0].includes(activeWord))\n    let candidateBlocks = []\n    goodCandidates.concat(worseCandidates).forEach(candidate => {\n      if(!candidateBlocks.map(e => e[1].opcode).includes(candidate[1].opcode)) {\n        candidateBlocks.push(candidate)\n      }\n    })\n    if(candidateBlocks.length > 0) {\n      completeEl.style.left = `calc(${caretPosition[0]}ch + 2rem + ${String(caretPosition[1] + 1).length}ch)`\n      completeEl.style.top = `calc(${(caretPosition[1] + (!wrap)) * 1.25}em - ${$(\"pre.text\").scrollTop + completeEl.getBoundingClientRect().height * wrap}px)`\n      candidateBlocks.forEach((candidate, index) => {\n        let element = document.createElement(\"li\")\n        element.classList.add(\"candidate\")\n        if(index == Number(completeEl.dataset.activeIndex)) element.classList.add(\"active\")\n        element.innerText = candidate[0]\n        element.style.setProperty(\"--candidate-color\", `#${formatData[candidate[1].opcode.split(\"_\")[0]]}`)\n        candidates.push(element)\n      })\n      completeEl.replaceChildren(...candidates)\n      tempListener = e => selectListener(e, activeWord)\n      $(\"div.contenteditable\").addEventListener(\"keydown\", tempListener)\n    } else {\n      completeEl.style.display = \"none\"\n      $(\"div.contenteditable\").removeEventListener(\"keydown\", tempListener)\n    }\n  } else { \n    completeEl.style.display = \"none\"\n    $(\"div.contenteditable\").removeEventListener(\"keydown\", tempListener)\n  }\n}"],"names":["$fAe1L","parcelRequire","$b7d27c5045e3ef5f$var$completeEl","$","$b7d27c5045e3ef5f$var$tempListener","$b7d27c5045e3ef5f$var$selectListener","activeWord","event","activeWord1","key","stopPropagation","Number","dataset","activeIndex","childNodes","length","classList","remove","add","window","autocomplete","candidates","querySelectorAll","caretPosition","innerText","split","style","display","validBlocks","block","default","keyword","opcode","includes","indentation","goodCandidates","Object","entries","filter","block1","startsWith","worseCandidates","candidateBlocks","concat","forEach","candidate","map","e","push","left","String","top","scrollTop","getBoundingClientRect","height","index","element","document","createElement","setProperty","formatData","replaceChildren","addEventListener","removeEventListener"],"version":3,"file":"index.012f61ef.js.map"}